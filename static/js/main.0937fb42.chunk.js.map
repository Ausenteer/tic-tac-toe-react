{"version":3,"sources":["hooks/useReduxStore.ts","store/selectors/gameSelector.ts","assets/GlobalStyle.ts","assets/Container.ts","assets/BoardWrapper.ts","assets/Square.ts","assets/Button.ts","store/helpers.ts","store/gameSlice.ts","App.tsx","reportWebVitals.ts","store/configureStore.ts","index.tsx"],"names":["useAppSelector","useSelector","gameSelector","state","board","currentMove","winner","GlobalStyle","createGlobalStyle","Container","styled","div","BoardWrapper","Square","Button","button","checkLine","array","symbol","size","filter","item","length","checkWin","lineWinner","secondaryDiagonalWinner","primaryDiagonalWinner","columnWinner","primaryDiagonal","secondaryDiagonal","column","i","undefined","map","temp","push","initialState","Array","fill","test","countStep","gameSlice","createSlice","name","reducers","setSymbol","action","payload","row","col","nextMove","winSymbol","startNewGame","actions","App","dispatch","useDispatch","boardGame","rowIndex","value","colIndex","tabIndex","role","onClick","rowId","index","result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0937fb42.chunk.js","sourcesContent":["import {\n  TypedUseSelectorHook, useDispatch, useSelector,\n} from 'react-redux';\nimport type { RootState, AppDispatch } from '../store/configureStore';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RootState } from '../configureStore';\n\nconst gameSelector = (state: RootState) => {\n  const { board, currentMove, winner } = state;\n  return {\n    board,\n    currentMove,\n    winner,\n  };\n};\n\nexport default gameSelector;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    width: 100%;\n    overflow-x: hidden;\n    height: 100%;\n    box-sizing: border-box;\n    overflow-y: scroll;\n    margin: 0;\n  }\n\n  a {\n    text-decoration: none;\n  }\n  button {\n    border-width: 0;\n  }\n\n  table {\n    display: table;\n    border-collapse: collapse;\n    box-sizing: border-box;\n    text-indent: initial;\n    border-spacing: 2px;\n    border-color: grey;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components/macro';\n\nconst Container = styled.div`\n    padding-right: 8px;\n    padding-left: 8px;\n    margin-right: auto;\n    margin-left: auto;\n    max-width: 96%;\n`;\n\nexport default Container;\n","import styled from 'styled-components/macro';\n\nconst BoardWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 300px;\n  margin: auto;\n`;\n\nexport default BoardWrapper;\n","import styled from 'styled-components/macro';\n\nconst Square = styled.div`\n  width: 33%;\n  height: 100px;\n  border: 2px solid tomato;\n  padding: 20px;\n  cursor: pointer;\n`;\n\nexport default Square;\n","import styled from 'styled-components/macro';\n\nconst Button = styled.button`\n    padding: 20px;\n`;\n\nexport default Button;\n","const checkLine = (array: string[], symbol: string, size: number) => {\n  let winner;\n  const filteredArray = array.filter((item) => item === symbol);\n  if (filteredArray.length === size) {\n    winner = symbol;\n  }\n  return winner;\n};\nconst checkWin = (\n  board: string[][],\n  symbol: string,\n) : string | undefined => {\n  const { length } = board;\n  const primaryDiagonal: string[] = [];\n  const secondaryDiagonal: string[] = [];\n  let column: string[] = [];\n\n  let lineWinner: string | undefined;\n  let secondaryDiagonalWinner: string | undefined;\n  let primaryDiagonalWinner: string | undefined;\n  let columnWinner: string | undefined;\n  for (let i = 0; i < length; i += 1) {\n    lineWinner = checkLine(board[i], symbol, length);\n    if (lineWinner !== undefined) {\n      break;\n    }\n\n    column = board.map((item) => item[i]);\n    columnWinner = checkLine(column, symbol, length);\n    if (columnWinner !== undefined) {\n      break;\n    }\n\n    let temp = i;\n    temp = length - 1 - temp;\n    secondaryDiagonal.push(board[i][temp]);\n    secondaryDiagonalWinner = checkLine(secondaryDiagonal, symbol, length);\n\n    primaryDiagonal.push(board[i][i]);\n    primaryDiagonalWinner = checkLine(primaryDiagonal, symbol, length);\n  }\n  return lineWinner || columnWinner || secondaryDiagonalWinner || primaryDiagonalWinner;\n};\n\nexport default checkWin;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport checkWin from './helpers';\n\ninterface Cell {\n  row: number,\n  col: number,\n}\ntype GameState = {\n  board: string[][],\n  test: string,\n  currentMove: 'X' | 'O',\n  winner: string,\n  countStep: number,\n};\nconst initialState: GameState = {\n  board: Array(3).fill(Array(3).fill('')),\n  test: 'test',\n  currentMove: 'X',\n  winner: '',\n  countStep: 0,\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setSymbol: (state, action: PayloadAction<Cell>) => {\n      const { row, col } = action.payload;\n      state.countStep += 1;\n      if (state.board[row][col] === '') {\n        const nextMove = state.currentMove === 'X' ? 'O' : 'X';\n        state.board[row][col] = state.currentMove;\n        const winSymbol = checkWin(state.board, state.currentMove);\n        if (winSymbol) {\n          state.winner = winSymbol;\n        } else {\n          state.currentMove = nextMove;\n        }\n      }\n    },\n    startNewGame: () => ({ ...initialState }),\n  },\n});\n\nexport const { setSymbol, startNewGame } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from './hooks/useReduxStore';\nimport gameSelector from './store/selectors/gameSelector';\nimport GlobalStyle from './assets/GlobalStyle';\nimport './App.css';\nimport Container from './assets/Container';\nimport BoardWrapper from './assets/BoardWrapper';\nimport Square from './assets/Square';\nimport Button from './assets/Button';\nimport { setSymbol, startNewGame } from './store/gameSlice';\n\nconst App:React.FC = () => {\n  const { board, currentMove, winner } = useAppSelector(gameSelector);\n  const dispatch = useAppDispatch();\n  const handleSetSymbol = (rowId: number, index: number) => {\n    if (!winner) {\n      dispatch(setSymbol({ row: rowId, col: index }));\n    }\n  };\n  const boardGame = board.map((row, rowIndex) => row.map((value, colIndex) => (\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n    <Square tabIndex={0} role=\"button\" onClick={() => handleSetSymbol(rowIndex, colIndex)}>{value}</Square>\n  )));\n  const result = winner ? `Победили ${winner}` : null;\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        <p>\n          Кто ходит:\n          {currentMove}\n        </p>\n        <BoardWrapper>\n          {boardGame}\n        </BoardWrapper>\n        <Button role=\"button\" onClick={() => dispatch(startNewGame())}>НОВАЯ ИГРА</Button>\n        {result}\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gameSlice from './gameSlice';\n\nconst store = configureStore({\n  reducer: gameSlice,\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport default store;\n\nexport type RootState = ReturnType <typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/configureStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}