{"version":3,"sources":["assets/variables.ts","assets/GlobalStyle.ts","assets/Container.ts","assets/Header.ts","components/AppHeader.tsx","hooks/useReduxStore.ts","assets/NumberWinsWrapper.ts","store/selectors/numberWinsSelector.ts","components/NumberWins.tsx","store/selectors/gameSelector.ts","assets/BoardWrapper.ts","assets/Square.ts","store/helpers/checkWin.ts","store/helpers/counterWins.ts","store/gameSlice.ts","assets/Button.ts","components/BoardGame.tsx","assets/InfoGameWrapper.ts","components/InfoGame.tsx","App.tsx","reportWebVitals.ts","store/configureStore.ts","index.tsx"],"names":["mainColor","GlobalStyle","createGlobalStyle","Container","styled","div","Header","header","AppHeader","useAppSelector","useSelector","NumberWinsWrapper","numberWinsSelector","state","numberWins","NumberWins","shallowEqual","X","O","gameSelector","board","currentMove","winner","BoardWrapper","Square","checkLine","array","symbol","size","filter","item","length","checkWin","lineWinner","secondaryDiagonalWinner","primaryDiagonalWinner","columnWinner","primaryDiagonal","secondaryDiagonal","column","i","undefined","map","temp","push","counterWins","currentWins","copyCurrentWins","initialState","Array","fill","countStep","gameSlice","createSlice","name","reducers","setSymbol","action","payload","row","col","nextMove","winSymbol","startNewGame","actions","Button","button","BoardGame","dispatch","useDispatch","boardGame","rowIndex","value","colIndex","tabIndex","role","onClick","rowId","index","InfoGameWrapper","InfoGame","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94c7cdce.chunk.js","sourcesContent":["export const mainColor: string = '#ffc72c';\n\nexport const secondaryColor: string = '#E8E8E8';\n","import { createGlobalStyle } from 'styled-components';\nimport { secondaryColor } from './variables';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    width: 100%;\n    overflow-x: hidden;\n    height: 100%;\n    box-sizing: border-box;\n    overflow-y: scroll;\n    margin: 0;\n    background-color: ${secondaryColor};\n}\n\n  a {\n    text-decoration: none;\n  }\n  button {\n    border-width: 0;\n    cursor: pointer;\n    font-family: inherit;\n    font-size: inherit;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components/macro';\n\nconst Container = styled.div`\n  font-size: 30px;\n  font-weight: 700;\n  padding-right: 8px;\n  padding-left: 8px;\n  margin-right: auto;\n  margin-left: auto;\n  max-width: 900px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport default Container;\n","import styled from 'styled-components/macro';\n\nconst Header = styled.header`\n  background-color: #ffc72c;\n  min-height: 10vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  margin-bottom: 60px;\n`;\n\nexport default Header;\n","import React from 'react';\nimport Header from '../assets/Header';\n\nconst AppHeader = () => (\n  <Header>\n    <h1>Tic Tac Toe (react game)</h1>\n  </Header>\n);\n\nexport default AppHeader;\n","import {\n  TypedUseSelectorHook, useDispatch, useSelector,\n} from 'react-redux';\nimport type { RootState, AppDispatch } from '../store/configureStore';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import styled from 'styled-components/macro';\n\nconst NumberWinsWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  grid-column-gap: 10px;\n  grid-row-gap: 15px;\n  font-size: 22px;\n  margin-bottom: 15px;\n  text-align: end;\n`;\n\nexport default NumberWinsWrapper;\n","import { RootState } from '../configureStore';\n\nconst numberWinsSelector = (state: RootState) => {\n  const { numberWins } = state;\n  return { numberWins };\n};\n\nexport default numberWinsSelector;\n","import React from 'react';\nimport { shallowEqual } from 'react-redux';\nimport { useAppSelector } from '../hooks/useReduxStore';\nimport NumberWinsWrapper from '../assets/NumberWinsWrapper';\nimport numberWinsSelector from '../store/selectors/numberWinsSelector';\n\nconst NumberWins:React.FC = () => {\n  const { numberWins } = useAppSelector(numberWinsSelector, shallowEqual);\n  return (\n    <NumberWinsWrapper>\n      <p>\n        Побед у крестиков:\n      </p>\n      <p>\n        {numberWins?.X}\n      </p>\n      <p>\n        Побед у ноликов:\n      </p>\n      <p>\n        {numberWins?.O}\n      </p>\n    </NumberWinsWrapper>\n  );\n};\n\nexport default NumberWins;\n","import { RootState } from '../configureStore';\n\nconst gameSelector = (state: RootState) => {\n  const { board, currentMove, winner } = state;\n  return {\n    board,\n    currentMove,\n    winner,\n  };\n};\n\nexport default gameSelector;\n","import styled from 'styled-components/macro';\nimport { mainColor } from './variables';\n\nconst BoardWrapper = styled.div`\n  width: 450px;\n  height: 450px;\n  background-color: ${mainColor};\n  color: #000;\n  border: 6px solid ${mainColor};\n  border-radius: 10px;\n  display: grid;\n  grid-template: repeat(3,1fr)/repeat(3,1fr);\n`;\n\nexport default BoardWrapper;\n","import styled from 'styled-components/macro';\n\nconst Square = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  border: 4px solid #ffc72c;\n  cursor: pointer;\n  background-color: #fff;\n  border-radius: 2px;\n\n`;\n\nexport default Square;\n","const checkLine = (array: string[], symbol: string, size: number) => {\n  let winner;\n  const filteredArray = array.filter((item) => item === symbol);\n  if (filteredArray.length === size) {\n    winner = symbol;\n  }\n  return winner;\n};\nconst checkWin = (\n  board: string[][],\n  symbol: string,\n) : string | undefined => {\n  const { length } = board;\n  const primaryDiagonal: string[] = [];\n  const secondaryDiagonal: string[] = [];\n  let column: string[] = [];\n\n  let lineWinner: string | undefined;\n  let secondaryDiagonalWinner: string | undefined;\n  let primaryDiagonalWinner: string | undefined;\n  let columnWinner: string | undefined;\n  for (let i = 0; i < length; i += 1) {\n    lineWinner = checkLine(board[i], symbol, length);\n    if (lineWinner !== undefined) {\n      break;\n    }\n\n    column = board.map((item) => item[i]);\n    columnWinner = checkLine(column, symbol, length);\n    if (columnWinner !== undefined) {\n      break;\n    }\n\n    let temp = i;\n    temp = length - 1 - temp;\n    secondaryDiagonal.push(board[i][temp]);\n    secondaryDiagonalWinner = checkLine(secondaryDiagonal, symbol, length);\n\n    primaryDiagonal.push(board[i][i]);\n    primaryDiagonalWinner = checkLine(primaryDiagonal, symbol, length);\n  }\n  return lineWinner || columnWinner || secondaryDiagonalWinner || primaryDiagonalWinner;\n};\n\nexport default checkWin;\n","const counterWins = (symbol: string, currentWins: any) => {\n  const copyCurrentWins = { ...currentWins };\n  if (symbol === 'ничья') {\n    copyCurrentWins.X += 1;\n    copyCurrentWins.O += 1;\n  } else {\n    copyCurrentWins[symbol] += 1;\n  }\n  return copyCurrentWins;\n};\n\nexport default counterWins;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport checkWin from './helpers/checkWin';\nimport counterWins from './helpers/counterWins';\n\ninterface Cell {\n  row: number,\n  col: number,\n}\ntype GameState = {\n  board: string[][],\n  currentMove: 'X' | 'O',\n  winner: string,\n  countStep: number,\n  numberWins: {\n    X: number,\n    O: number,\n  }\n};\nconst initialState: GameState = {\n  board: Array(3).fill(Array(3).fill('')),\n  currentMove: 'X',\n  winner: '',\n  countStep: 0,\n  numberWins: {\n    X: 0,\n    O: 0,\n  },\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setSymbol: (state, action: PayloadAction<Cell>) => {\n      const { row, col } = action.payload;\n      state.countStep += 1;\n      if (state.board[row][col] === '') {\n        const nextMove = state.currentMove === 'X' ? 'O' : 'X';\n        state.board[row][col] = state.currentMove;\n        const winSymbol = checkWin(state.board, state.currentMove);\n        if (winSymbol) {\n          state.winner = winSymbol;\n          state.numberWins = counterWins(winSymbol, state.numberWins);\n        } else {\n          state.currentMove = nextMove;\n        }\n      }\n    },\n    startNewGame: (state) => {\n      state.board = initialState.board;\n      state.currentMove = initialState.currentMove;\n      state.winner = initialState.winner;\n      state.countStep = initialState.countStep;\n    },\n  },\n});\n\nexport const { setSymbol, startNewGame } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import styled from 'styled-components/macro';\nimport { mainColor } from './variables';\n\nconst Button = styled.button`\n  width: 450px;\n  margin-top: 15px;\n  background-color: ${mainColor};\n  padding: 20px;\n  border-radius: 10px;\n`;\n\nexport default Button;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../hooks/useReduxStore';\nimport gameSelector from '../store/selectors/gameSelector';\nimport BoardWrapper from '../assets/BoardWrapper';\nimport Square from '../assets/Square';\nimport { setSymbol, startNewGame } from '../store/gameSlice';\nimport Button from '../assets/Button';\n\nconst BoardGame:React.FC = () => {\n  const { board, winner } = useAppSelector(gameSelector);\n  const dispatch = useAppDispatch();\n  const handleSetSymbol = (rowId: number, index: number) => {\n    if (!winner) {\n      dispatch(setSymbol({ row: rowId, col: index }));\n    }\n  };\n  const boardGame = board.map((row, rowIndex) => row.map((value, colIndex) => (\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n    <Square tabIndex={0} role=\"button\" onClick={() => handleSetSymbol(rowIndex, colIndex)}>{value}</Square>\n  )));\n  return (\n    <>\n      <BoardWrapper>\n        {boardGame}\n      </BoardWrapper>\n      <Button role=\"button\" onClick={() => dispatch(startNewGame())}>НОВАЯ ИГРА</Button>\n    </>\n  );\n};\n\nexport default BoardGame;\n","import styled from 'styled-components/macro';\nimport { mainColor } from './variables';\n\nconst InfoGameWrapper = styled.div`\n  display: flex;\n  background-color: ${mainColor};\n  padding: 5px;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  \n  p:last-child {\n    margin-left: 5px;\n    width: 23px;\n  }\n`;\n\nexport default InfoGameWrapper;\n","import React from 'react';\nimport { useAppSelector } from '../hooks/useReduxStore';\nimport gameSelector from '../store/selectors/gameSelector';\nimport InfoGameWrapper from '../assets/InfoGameWrapper';\n\nconst InfoGame:React.FC = () => {\n  const { currentMove } = useAppSelector(gameSelector);\n  return (\n    <InfoGameWrapper>\n      <p>\n        Кто ходит:\n      </p>\n      <p>\n        {currentMove}\n      </p>\n    </InfoGameWrapper>\n  );\n};\n\nexport default InfoGame;\n","import React from 'react';\nimport GlobalStyle from './assets/GlobalStyle';\nimport './App.css';\nimport Container from './assets/Container';\nimport AppHeader from './components/AppHeader';\nimport NumberWins from './components/NumberWins';\nimport BoardGame from './components/BoardGame';\nimport InfoGame from './components/InfoGame';\n\nconst App:React.FC = () => (\n  <>\n    <GlobalStyle />\n    <AppHeader />\n    <Container>\n      <NumberWins />\n      <InfoGame />\n      <BoardGame />\n    </Container>\n  </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gameSlice from './gameSlice';\n\nconst store = configureStore({\n  reducer: gameSlice,\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport default store;\n\nexport type RootState = ReturnType <typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/configureStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}