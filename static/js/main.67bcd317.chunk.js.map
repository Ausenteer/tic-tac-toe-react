{"version":3,"sources":["assets/variables.ts","assets/GlobalStyle.ts","assets/Container.ts","assets/Header.ts","components/AppHeader.tsx","hooks/useReduxStore.ts","assets/NumberWinsWrapper.ts","store/selectors/numberWinsSelector.ts","components/NumberWins.tsx","store/selectors/gameSelector.ts","assets/BoardWrapper.ts","utils/setColor.ts","assets/Square.ts","store/helpers/checkWin.ts","store/gameSlice.ts","assets/ResetButton.ts","components/BoardGame.tsx","assets/InfoGameWrapper.ts","components/InfoGame.tsx","assets/ModalWrapper.ts","components/Modal.tsx","assets/ModalButton.ts","utils/createText.ts","components/ModalWinner.tsx","App.tsx","reportWebVitals.ts","store/configureStore.ts","index.tsx"],"names":["colorPlayerX","colorPlayerO","GlobalStyle","createGlobalStyle","Container","styled","div","Header","header","AppHeader","useAppSelector","useSelector","NumberWinsWrapper","numberWinsSelector","state","numberWins","NumberWins","shallowEqual","X","O","gameSelector","board","currentMove","winner","BoardWrapper","setColor","player","Square","props","checkLine","array","symbol","size","filter","item","length","checkWin","lineWinner","secondaryDiagonalWinner","primaryDiagonalWinner","columnWinner","primaryDiagonal","secondaryDiagonal","column","i","undefined","map","temp","push","initialState","Array","fill","countStep","gameSlice","createSlice","name","reducers","setSymbol","action","payload","row","col","countSquare","nextMove","winSymbol","startNewGame","actions","ResetButton","button","BoardGame","dispatch","useDispatch","handleSetSymbol","useCallback","rowId","index","boardGame","rowIndex","value","colIndex","tabIndex","role","onClick","InfoGameWrapper","InfoGame","ModalWrapper","active","Modal","setActive","children","ModalButton","createText","ModalWinner","useState","activeModal","setActiveModal","useEffect","text","confetti","width","window","innerWidth","height","innerHeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67bcd317.chunk.js","sourcesContent":["export const secondaryColor: string = '#E8E8E8';\n\nexport const colorPlayerX = 'tomato';\nexport const colorPlayerO = 'cornflowerblue';\n","import { createGlobalStyle } from 'styled-components';\nimport { secondaryColor } from './variables';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    width: 100%;\n    overflow-x: hidden;\n    height: 100%;\n    box-sizing: border-box;\n    overflow-y: scroll;\n    margin: 0;\n    background-color: ${secondaryColor};\n}\n\n  a {\n    text-decoration: none;\n  }\n  button {\n    border-width: 0;\n    cursor: pointer;\n    font-family: inherit;\n    font-size: inherit;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components/macro';\n\nconst Container = styled.div`\n  font-weight: 700;\n  padding-right: 8px;\n  padding-left: 8px;\n  margin-right: auto;\n  margin-left: auto;\n  max-width: 900px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 15px;\n`;\n\nexport default Container;\n","import styled from 'styled-components/macro';\nimport { colorPlayerX, colorPlayerO } from './variables';\n\nconst Header = styled.header`\n  min-height: 10vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  margin-bottom: 40px;\n  background: linear-gradient(\n          120deg, ${colorPlayerX}, ${colorPlayerO});\n`;\n\nexport default Header;\n","import React from 'react';\nimport Header from '../assets/Header';\n\nconst AppHeader = () => (\n  <Header>\n    <h1>Tic Tac Toe</h1>\n  </Header>\n);\n\nexport default AppHeader;\n","import {\n  TypedUseSelectorHook, useDispatch, useSelector,\n} from 'react-redux';\nimport type { RootState, AppDispatch } from '../store/configureStore';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import styled from 'styled-components/macro';\n\nconst NumberWinsWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4,1fr);\n  grid-column-gap: 10px;\n  grid-row-gap: 15px;\n  font-size: 22px;\n  margin-bottom: 15px;\n  text-align: end;\n  \n  p {\n    padding: 4px;\n  }\n  p:nth-child(1) {\n    background-color: tomato;\n    color: white;\n    border-radius: 4px;\n  }\n  p:nth-child(3) {\n    background-color: cornflowerblue;\n    color: white;\n    border-radius: 4px;\n  }\n`;\n\nexport default NumberWinsWrapper;\n","import { RootState } from '../configureStore';\n\nconst numberWinsSelector = (state: RootState) => {\n  const { numberWins } = state;\n  return { numberWins };\n};\n\nexport default numberWinsSelector;\n","import React from 'react';\nimport { shallowEqual } from 'react-redux';\nimport { useAppSelector } from '../hooks/useReduxStore';\nimport NumberWinsWrapper from '../assets/NumberWinsWrapper';\nimport numberWinsSelector from '../store/selectors/numberWinsSelector';\n\nconst NumberWins:React.FC = () => {\n  const { numberWins } = useAppSelector(numberWinsSelector, shallowEqual);\n  return (\n    <NumberWinsWrapper>\n      <p>\n        X:\n      </p>\n      <p>\n        {numberWins.X}\n      </p>\n      <p>\n        O:\n      </p>\n      <p>\n        {numberWins.O}\n      </p>\n    </NumberWinsWrapper>\n  );\n};\n\nexport default NumberWins;\n","import { RootState } from '../configureStore';\n\nconst gameSelector = (state: RootState) => {\n  const { board, currentMove, winner } = state;\n  return {\n    board,\n    currentMove,\n    winner,\n  };\n};\n\nexport default gameSelector;\n","import styled from 'styled-components/macro';\n\nconst BoardWrapper = styled.div`\n  width: 450px;\n  height: 450px;\n  color: #000;\n  display: grid;\n  grid-template: repeat(3,1fr)/repeat(3,1fr);\n  font-size: 45px;\n  margin-top: 15px;\n  margin-bottom: 15px;\n  \n  @media (max-width: 400px) {\n    width: 350px;\n    height: 350px;\n  }\n`;\n\nexport default BoardWrapper;\n","import { TPlayers } from '../types/types';\nimport { colorPlayerO, colorPlayerX } from '../assets/variables';\n\nconst setColor = (player: TPlayers | '') => {\n  if (!player) return '#fff';\n  return player === 'X' ? colorPlayerX : colorPlayerO;\n};\n\nexport default setColor;\n","import styled from 'styled-components/macro';\nimport { TPlayers } from '../types/types';\nimport setColor from '../utils/setColor';\n\nconst Square = styled.div<{ player: TPlayers | '' }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  cursor: pointer;\n  background-color: #fff;\n  color: ${(props) => setColor(props.player)};\n  border-radius: 10px;\n`;\n\nexport default Square;\n","import { TPlayers } from '../../types/types';\n\nconst checkLine = (array: string[], symbol: TPlayers, size: number): TPlayers | undefined => {\n  let winner;\n  const filteredArray = array.filter((item) => item === symbol);\n  if (filteredArray.length === size) {\n    winner = symbol;\n  }\n  return winner;\n};\nconst checkWin = (\n  board: string[][],\n  symbol: TPlayers,\n) : TPlayers | undefined => {\n  const { length } = board;\n  const primaryDiagonal: string[] = [];\n  const secondaryDiagonal: string[] = [];\n  let column: string[] = [];\n\n  let lineWinner: TPlayers | undefined;\n  let secondaryDiagonalWinner: TPlayers | undefined;\n  let primaryDiagonalWinner: TPlayers | undefined;\n  let columnWinner: TPlayers | undefined;\n\n  for (let i = 0; i < length; i += 1) {\n    lineWinner = checkLine(board[i], symbol, length);\n    if (lineWinner !== undefined) {\n      break;\n    }\n\n    column = board.map((item) => item[i]);\n    columnWinner = checkLine(column, symbol, length);\n    if (columnWinner !== undefined) {\n      break;\n    }\n\n    let temp = i;\n    temp = length - 1 - temp;\n    secondaryDiagonal.push(board[i][temp]);\n    secondaryDiagonalWinner = checkLine(secondaryDiagonal, symbol, length);\n\n    primaryDiagonal.push(board[i][i]);\n    primaryDiagonalWinner = checkLine(primaryDiagonal, symbol, length);\n  }\n  return lineWinner || columnWinner || secondaryDiagonalWinner || primaryDiagonalWinner;\n};\n\nexport default checkWin;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport checkWin from './helpers/checkWin';\nimport { Cell, TPlayers, GameState } from '../types/types';\n\nconst initialState: GameState = {\n  board: Array(3).fill(Array(3).fill('')),\n  currentMove: 'X',\n  winner: '',\n  countStep: 0,\n  numberWins: {\n    X: 0,\n    O: 0,\n  },\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setSymbol: (state, action: PayloadAction<Cell>) => {\n      const { row, col } = action.payload;\n      state.countStep += 1;\n      const countSquare = state.board.length ** 2;\n      if (state.board[row][col] === '') {\n        const nextMove = state.currentMove === 'X' ? 'O' : 'X';\n        state.board[row][col] = state.currentMove;\n        const winSymbol: TPlayers | undefined = checkWin(state.board, state.currentMove);\n        if (winSymbol) {\n          state.winner = winSymbol;\n          state.numberWins[winSymbol] += 1;\n        } else {\n          state.currentMove = nextMove;\n        }\n        if (state.countStep === countSquare && !state.winner) {\n          state.winner = 'noWinner';\n          state.numberWins.X += 1;\n          state.numberWins.O += 1;\n        }\n      }\n    },\n    startNewGame: (state) => {\n      state.board = initialState.board;\n      state.currentMove = initialState.currentMove;\n      state.winner = initialState.winner;\n      state.countStep = initialState.countStep;\n    },\n  },\n});\n\nexport const { setSymbol, startNewGame } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import styled from 'styled-components/macro';\n\nconst ResetButton = styled.button`\n  width: 450px;\n  background-color: darkgrey;\n  padding: 20px;\n  border-radius: 10px;\n  font-size: 30px;\n  color: black;\n  \n  @media (max-width: 400px) {\n    width: 350px;\n  }\n`;\n\nexport default ResetButton;\n","import React, { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from '../hooks/useReduxStore';\nimport gameSelector from '../store/selectors/gameSelector';\nimport BoardWrapper from '../assets/BoardWrapper';\nimport Square from '../assets/Square';\nimport { setSymbol, startNewGame } from '../store/gameSlice';\nimport ResetButton from '../assets/ResetButton';\nimport { TPlayers } from '../types/types';\n\nconst BoardGame:React.FC = () => {\n  const { board, winner } = useAppSelector(gameSelector);\n  const dispatch = useAppDispatch();\n  const handleSetSymbol = useCallback((rowId: number, index: number) => {\n    if (!winner) {\n      dispatch(setSymbol({ row: rowId, col: index }));\n    }\n  }, []);\n  const boardGame = board.map((row, rowIndex) => row.map((value, colIndex) => (\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n    <Square\n      tabIndex={0}\n      role=\"button\"\n      onClick={() => handleSetSymbol(rowIndex, colIndex)}\n      player={value as TPlayers}\n    >\n      {value}\n    </Square>\n  )));\n  return (\n    <>\n      <BoardWrapper>\n        {boardGame}\n      </BoardWrapper>\n      <ResetButton role=\"button\" onClick={() => dispatch(startNewGame())}>НОВАЯ ИГРА</ResetButton>\n    </>\n  );\n};\n\nexport default BoardGame;\n","import styled from 'styled-components/macro';\n\nconst InfoGameWrapper = styled.div`\n  display: flex;\n  font-size: 22px;\n  \n  p:last-child {\n    margin-left: 5px;\n    width: 23px;\n  }\n`;\n\nexport default InfoGameWrapper;\n","import React from 'react';\nimport { useAppSelector } from '../hooks/useReduxStore';\nimport gameSelector from '../store/selectors/gameSelector';\nimport InfoGameWrapper from '../assets/InfoGameWrapper';\n\nconst InfoGame:React.FC = () => {\n  const { currentMove } = useAppSelector(gameSelector);\n  return (\n    <InfoGameWrapper>\n      <p>\n        Кто ходит:\n      </p>\n      <p>\n        {currentMove}\n      </p>\n    </InfoGameWrapper>\n  );\n};\n\nexport default InfoGame;\n","import styled from 'styled-components/macro';\n\nconst ModalWrapper = styled.div<{ active: boolean }>`\n  height: 100vh;\n  width: 100vw;\n  background-color: rgba(0, 0, 0, 0.4);\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 30px;\n  opacity: ${(props) => (props.active ? '1' : '0')};\n  transition: 0.5s;\n  pointer-events: ${(props) => (props.active ? 'all' : 'none')};;\n  \n  div {\n    padding: 20px;\n    border-radius: 12px;\n    background-color: #fff;\n    transform: ${(props) => (props.active ? 'scale(1)' : 'scale(0.5)')};\n    transition: 0.4s all;\n    font-size: 22px;\n    \n    p {\n      font-weight: 600;\n      text-align: center;\n      margin: 15px;\n    }\n  }\n`;\n\nexport default ModalWrapper;\n","import React from 'react';\nimport ModalWrapper from '../assets/ModalWrapper';\n\ninterface IModal {\n  active: boolean,\n  setActive: (is: boolean) => void;\n  children: any,\n}\n\nconst Modal:React.FC<IModal> = ({ active, setActive, children }) => (\n  <ModalWrapper onClick={() => setActive(false)} active={active}>\n    <div>\n      {children}\n    </div>\n  </ModalWrapper>\n);\n\nexport default Modal;\n","import styled from 'styled-components/macro';\nimport { colorPlayerO, colorPlayerX } from './variables';\n\nconst getColor = (winner: string) => {\n  let color;\n  if (winner === 'X') {\n    color = colorPlayerX;\n  } else if (winner === 'O') {\n    color = colorPlayerO;\n  } else {\n    color = `linear-gradient(\n        120deg, ${colorPlayerX}, ${colorPlayerO})`;\n  }\n  return color;\n};\nconst ModalButton = styled.button<{ winner: string }>`\n  width: 450px; \n  background: ${(props) => getColor(props.winner)};\n  padding: 20px;\n  border-radius: 10px;\n  font-size: 26px;\n  color: white;\n  \n  @media (max-width: 400px) {\n    width: 350px;\n  }\n`;\n\nexport default ModalButton;\n","const createText = (winner: string) => {\n  let text;\n  if (winner === 'noWinner') {\n    text = 'Победила дружба!';\n  } else if (winner === 'X') {\n    text = 'Крестики победили!';\n  } else {\n    text = 'Нолики победили!';\n  }\n  return text;\n};\n\nexport default createText;\n","import React, { useEffect, useState } from 'react';\nimport Confetti from 'react-confetti';\nimport { useAppSelector } from '../hooks/useReduxStore';\nimport gameSelector from '../store/selectors/gameSelector';\nimport Modal from './Modal';\nimport ModalButton from '../assets/ModalButton';\nimport createText from '../utils/createText';\n\nconst ModalWinner:React.FC = () => {\n  const { winner } = useAppSelector(gameSelector);\n  const [activeModal, setActiveModal] = useState(false);\n  useEffect(() => {\n    if (winner) {\n      setActiveModal(true);\n    }\n  }, [winner]);\n  const text = createText(winner);\n  const confetti = winner && (\n    <Confetti\n      width={window.innerWidth}\n      height={window.innerHeight}\n    />\n  );\n  return (\n    <>\n      <Modal active={activeModal} setActive={setActiveModal}>\n        <p>{text}</p>\n        <ModalButton winner={winner} role=\"button\" onClick={() => setActiveModal(false)}>УРА!</ModalButton>\n      </Modal>\n      {confetti}\n    </>\n  );\n};\n\nexport default ModalWinner;\n","import React from 'react';\nimport GlobalStyle from './assets/GlobalStyle';\nimport './App.css';\nimport Container from './assets/Container';\nimport AppHeader from './components/AppHeader';\nimport NumberWins from './components/NumberWins';\nimport BoardGame from './components/BoardGame';\nimport InfoGame from './components/InfoGame';\nimport ModalWinner from './components/ModalWinner';\n\nconst App:React.FC = () => (\n  <>\n    <GlobalStyle />\n    <AppHeader />\n    <Container>\n      <NumberWins />\n      <InfoGame />\n      <BoardGame />\n      <ModalWinner />\n    </Container>\n  </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gameSlice from './gameSlice';\n\nconst store = configureStore({\n  reducer: gameSlice,\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport default store;\n\nexport type RootState = ReturnType <typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/configureStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}